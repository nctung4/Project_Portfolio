<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Cong T. Nguyen</title>
    <link>https://nctung4.github.io/Project_Portfolio/post/</link>
    <description>Recent content in Projects on Cong T. Nguyen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 12:00:00 -0500</lastBuildDate><atom:link href="https://nctung4.github.io/Project_Portfolio/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project 1: Customer Segmentation and Classification</title>
      <link>https://nctung4.github.io/Project_Portfolio/post/project-1/</link>
      <pubDate>Sun, 16 May 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nctung4.github.io/Project_Portfolio/post/project-1/</guid>
      <description>The focus of this project is on cluster analysis, and classification modeling on a customer database.
Dataset This dataset was published on kaggle, available here.
Table of Contents:  Overview Project Motivation Technical Aspect Major Results Credits  Overview This notebook&amp;rsquo;s purpose is to develop a customer segmentation model to define a marketing strategy. The sample Dataset summarizes the usage behavior of about 9000 active credit card holders during the last 6 months.</description>
    </item>
    
    <item>
      <title>Project 2: Face Mask Detection</title>
      <link>https://nctung4.github.io/Project_Portfolio/post/project-2/</link>
      <pubDate>Sat, 15 May 2021 11:00:59 -0400</pubDate>
      
      <guid>https://nctung4.github.io/Project_Portfolio/post/project-2/</guid>
      <description>Overview:  It is a real-time face mask detection project, developed in python, using Deep Learning and OpenCV. I used the transfer learning technique. (MobileNetV2 architecture) Used several preprocessing technique, such as one-hot encoding the labels, or constructing the training image for data augmentation. The final model performs absolutely amazing, with almost a 100% accuracy.  Final Model:  MobileNetV2 architecture. Compiled with an adam optimizer, and binary crossentropy loss function.</description>
    </item>
    
  </channel>
</rss>
